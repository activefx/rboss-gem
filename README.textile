h1. RBoss Gem - Yahoo! Boss Search

h2.  DESCRIPTION:

A handy gem to make using the Yahoo Boss API nice and easy in ruby.

"Yahoo! Boss Search official site":http://developer.yahoo.com/search/boss/

"Yahoo! Boss Search API":http://developer.yahoo.com/search/boss/boss_guide/

Add feature requests and bugs here: "http://eshopworks.lighthouseapp.com/projects/15732-rboss/overview":http://eshopworks.lighthouseapp.com/projects/15732-rboss/overview

h2.  FEATURES:

Search
* Images
* News
* Web

Also spelling suggestions

Return results as:
* JSON string
* XML string
* Plain old ruby objects (POROs)

h2. INSTALL:

<pre><code>
  gem sources --add http://gems.github.com/ 
  gem install eshopworks-rboss
</code></pre>

Get a yahoo boss api-key: "http://developer.yahoo.com/wsregapp":http://developer.yahoo.com/wsregapp

h2. USAGE:

<pre><code>
  require 'rubygems'
  require 'boss'
  
  api = Boss::Api.new('boss-api-key-got-from-yahoo')
  
  #Search defaults to web search with following defaults
  # count = 10  
  # lang = eng
  # Results by default are ruby objects
  api.search('monkeys')
  
  #Delimit multiple search terms with commas
  api.search('dancing,monkeys')

  #Delimit Exact search with quotation marks
  api.search('"dancing monkeys"')
    
  #Use '-' for minus terms
  api.search('monkeys -dancing')

  #Search images, spelling, news and web
  api.search_images('monkeys')
  api.search_spelling('monkeys')
  api.search_news('monkeys')
  api.search_web('monkeys')

  #By default returns ruby object results
  results = api.search_web('monkeys')
  results.each { |web| puts web.title }

  #Configure search with hash
  xml = api.search_spelling('monkeys', :format => 'xml', :count => 5)

  #Configure search with block
  xml = api.search_spelling('monkeys') do |config|
    config.format = 'xml'
    config.count = 5
  end
  
  #Access general search result information
  results = api.search('monkeys', :count => 5)
  puts results.totalhits
</code></pre>

h3. Global Search Options (applies to news/images/web search)

<pre><code>
  api.search('monkeys') do |config|
    config.start = 1
    config.count = 10
    config.lang = 'en'
    config.region = 'us'
    config.format = 'xml'
    config.callback = ''     #name of the callback function to wrap the result (valid only if format is set to "json")
    config.sites = 'abc.com,cnn.com'
  end
</pre></code>

h3. Global Search Results data (applies to news/images/web search results)

<pre><code>
  results = api.search('monkeys', :count => 1)
  puts results.deephits      #approximate count that includes duplicates
  puts results.totalhits     #approximate count that excludes duplicates
  puts results.responsecode  #response code return by Yahoo webservice
  puts results.start         #the first numeric result to display
  puts results.count         #Indicates how many results to show per page
  puts results.nextpage      #link to what would be the next page of search results
</pre></code>

h3. Web Search Result

<pre><code>
  #We filter here to exclude certain types of content
  results = api.search_web('monkeys', :filter => '-porn')
  results.each do |web|
    puts web.abstract
    puts web.date
    puts web.dispurl  #URL of document matching the query result.
    puts web.clickurl #navigation URL that leads to the target URL
    puts web.size     #documentâ€™s size in bytes
    puts web.title
    puts web.url
  end
</code></pre>

h3. News Search Result

<pre><code>
  #We retrieve documents by age (possible options: [1-30]d ) 
  results = api.search_news('monkeys', :age => '7d')
  results.each do |news|
    puts news.abstract
    puts news.clickurl
    puts news.title
    puts news.language
    puts news.date
    puts news.time
    puts news.source
    puts news.sourceurl
    puts news.url
  end
</code></pre>
  
h3. Image Search Result

<pre><code>
  #Add constraint on dimension (possible options: 'small', 'medium', 'large', 'wallpaper')
  #Activate the Offensive Content Reduction filter
  results = api.search_images('monkeys', :dimensions => 'small', :filter => 'true')
  results.each do |image|
    puts image.abstract
    puts image.clickurl
    puts image.filename
    puts image.size
    puts image.format
    puts image.height
    puts image.date
    puts image.mimetype
    puts image.refererclickurl
    puts image.refererurl
    puts image.title
    puts image.url
    puts image.width
    puts image.thumbnail_height
    puts image.thumbnail_url
    puts image.thumbnail_width
  end
</code></pre>

h3. Spell Search Result

<pre><code>
  results = api.search_spelling('monkeys')
  results.each do |spell|
    puts spell.suggestion
  end
</code></pre>

h2.  LICENSE:

Copyright (c) 2008 eShopworks

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
